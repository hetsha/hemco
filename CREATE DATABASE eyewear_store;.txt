CREATE DATABASE eyewear_store;
USE eyewear_store;

-- 1. Users Table
CREATE TABLE users (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    full_name VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    password VARCHAR(255),
    phone VARCHAR(15),
    address TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 2. Frames Table
CREATE TABLE frames (
    frame_id INT PRIMARY KEY AUTO_INCREMENT,
    frame_name VARCHAR(150),
    brand_name VARCHAR(100),
    frame_material VARCHAR(50),
    frame_shape VARCHAR(50),
    frame_color VARCHAR(50),
    price DECIMAL(10, 2),
    stock_quantity INT,
    description TEXT,
    image_url VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 3. Lens Companies Table
CREATE TABLE lens_companies (
    company_id INT PRIMARY KEY AUTO_INCREMENT,
    company_name VARCHAR(100),
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 4. Glasses/Lenses Table
CREATE TABLE lenses (
    lens_id INT PRIMARY KEY AUTO_INCREMENT,
    company_id INT,
    lens_type ENUM('Single Vision', 'Bifocal', 'Progressive', 'Blue Light', 'Polarized'),
    lens_material VARCHAR(50),
    coating_type VARCHAR(50),
    price DECIMAL(10, 2),
    stock_quantity INT,
    description TEXT,
    image_url VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (company_id) REFERENCES lens_companies(company_id) ON DELETE CASCADE
);

-- 5. Cart Table (Frame, Lens, and Prescription Details)
CREATE TABLE cart (
    cart_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    frame_id INT,
    lens_id INT,
    quantity INT,
    lens_power_left VARCHAR(20) NOT NULL,
    lens_power_right VARCHAR(20) NOT NULL,
    cyl_left VARCHAR(20) NULL, -- Cylinder left eye
    cyl_right VARCHAR(20) NULL, -- Cylinder right eye
    axis_left VARCHAR(20) NULL, -- Axis left eye
    axis_right VARCHAR(20) NULL, -- Axis right eye
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (frame_id) REFERENCES frames(frame_id) ON DELETE CASCADE,
    FOREIGN KEY (lens_id) REFERENCES lenses(lens_id) ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    total_amount DECIMAL(10, 2),
    payment_status ENUM('Pending', 'Completed', 'Failed'),
    shipping_status ENUM('Processing', 'Shipped', 'Delivered', 'Cancelled'),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- 7. Order Items Table
CREATE TABLE order_items (
    order_item_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    frame_id INT,
    lens_id INT,
    quantity INT,
    price DECIMAL(10, 2),
    lens_power_left VARCHAR(20) NOT NULL,
    lens_power_right VARCHAR(20) NOT NULL,
    cyl_left VARCHAR(20) NULL,
    cyl_right VARCHAR(20) NULL,
    axis_left VARCHAR(20) NULL,
    axis_right VARCHAR(20) NULL,
    FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (frame_id) REFERENCES frames(frame_id) ON DELETE CASCADE,
    FOREIGN KEY (lens_id) REFERENCES lenses(lens_id) ON DELETE CASCADE
);

-- 8. Payments Table
CREATE TABLE payments (
    payment_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    payment_method VARCHAR(50),
    transaction_id VARCHAR(100),
    payment_status ENUM('Pending', 'Completed', 'Failed'),
    paid_amount DECIMAL(10, 2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE
);

-- 9. Shipping Table (Shiprocket Integration)
CREATE TABLE shipping (
    shipping_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    courier_name VARCHAR(100),
    tracking_id VARCHAR(100),
    estimated_delivery_date DATE,
    shipping_status ENUM('Processing', 'Shipped', 'Delivered', 'Cancelled'),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE
);

-- 10. Reviews & Ratings Table
CREATE TABLE reviews (
    review_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    product_type ENUM('Frame', 'Lens'),
    product_id INT,
    rating INT CHECK (rating >= 1 AND rating <= 5),
    review_text TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);
